# -*- encoding: utf-8 -*-
"""Atmosphere standard international (ISA)
(Международная стандартная атмосфера (МСА) по ГОСТ 4401-81)

Функции интерполирующие табличные значения.
ToDo: Для оптимизации заменить интерполяцию аппроксимацией.

Принятые обозначения и размерности:
    h [м] - высота
    t [K] - температура
    a [м/с] - скорость звука
    p [Па] - давление
    rho [кг/м^3] - плотность
    nu [м^2/с] - кинематическая вязкость
"""
import numpy as np
# Аппроксимации:
# import math
# Э.В, Антоненко, Н.А, Привалова Модели стандартной атмосферы
# Формула Бьеркнесса (при H < 11 км)
# den1 = lambda H: den0*(1-H/4430)**4.256
# Формула Галлея (при H > 11 км)
# den2 = lambda H: den0*math.exp(-(H-11000)/6340)

_h = np.array(
    [0, 500, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 
     10000, 11000, 12000, 14000, 16000, 18000, 20000, 24000, 28000, 32000, 
     36000, 40000, 50000, 60000, 80000])

_t = np.array(
    [288.2, 284.9, 281.7, 278.4, 275.2, 271.9, 268.7, 262.2, 255.7, 249.2, 
     242.7, 236.2, 229.7, 223.3, 216.8, 216.7, 216.7, 216.7, 216.7, 216.7,
     220.6, 224.5, 228.5, 239.3, 250.4, 270.7, 247.0, 198.6])

_a = np.array(
    [340.3, 338.4, 336.4, 334.5, 332.5, 330.6, 328.6, 324.6, 320.6, 316.5, 
     312.3, 308.1, 303.9, 299.6, 295.2, 295.1, 295.1, 295.1, 295.1, 295.1, 
     297.7, 300.4, 303, 310.1, 317.2, 329.8, 315.1, 282.5])

_p = np.array(
    [101330, 95464, 89877, 84559, 79499, 74690, 70123, 61661, 54052, 47217, 
     41106, 35653, 30801, 26500, 22700, 19399, 14170, 10353, 7565, 5529, 
     2971, 1616, 889, 499, 287, 80, 22, 1])

_rho = np.array(
    [1.225, 1.1673, 1.1117, 1.0581, 1.0065, 0.9569, 0.9093, 0.8194, 0.7365, 
     0.6601, 0.59, 0.5258, 0.4671, 0.4135, 0.3648, 0.3119, 0.2279, 0.1665, 
     0.1216, 0.0889, 0.0469, 0.0251, 0.0136, 0.0073, 0.004, 0.00103,
     0.00031, 0.00002])

_nu = np.array(
    [1.46*10**5, 1.52*10**5, 1.58*10**5, 1.65*10**5, 1.71*10**5, 1.79*10**5,
     1.86*10**5, 2.03*10**5, 2.21*10**5, 2.42*10**5, 2.65*10**5, 2.90*10**5,
     3.20*10**5, 3.53*10**5, 3.90*10**5, 4.56*10**5, 6.24*10**5, 8.54*10**5,
     1.17*10**4, 1.60*10**4, 3.07*10**4, 5.84*10**4, 1.10*10**3, 2.13*10**3,
     4.01*10**3, 1.66*10**2, 5.11*10**2, 7.16*10**1])

def p(h):
    return np.interp(h, _h, _p)

def t(h):
    return np.interp(h, _h, _t)

def a(h):
    return np.interp(h, _h, _a)

def rho(h):
    return np.interp(h, _h, _rho)

def nu(h):
    return np.interp(h, _h, _nu)
